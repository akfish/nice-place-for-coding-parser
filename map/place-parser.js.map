{"version":3,"sources":["place-parser.coffee"],"names":[],"mappings":"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","file":"place-parser.js","sourceRoot":"/source/","sourcesContent":["marked = require 'marked'\n\nmodule.exports =\nclass PlaceParser\n  constructor: ->\n    @lexer = marked.lexer\n    @states =\n      idle: @_wait_for_list_start\n      addr_idle: @_wait_for_addr_start\n      error: @_parse_error\n      addr: @_parse_addr\n      note: @_parse_note\n\n  parse: (src) ->\n    tokens = @lexer(src)\n\n    @current_state = 'idle'\n    @current_item = null\n\n    @items = []\n\n    for token in tokens\n      @current_state = @states[@current_state].bind(@) token, @current_item\n\n    @states[@current_state].bind(@) type: 'EOF', @current_item\n\n    if src.length > 0 and @items.length == 0\n      throw new Error \"Source not empty but not place information was found\"\n\n    return @items\n\n  _finalize_item: (item) ->\n    [name, address] = item.address.split(':')\n    if not address?\n      throw new Error(\"Wrong address format: '#{item.address}'\")\n    item.name = name.trim()\n    item.address = address.trim()\n    r = /\\s*(.*)\\n*\\s*from \\@(.*)$/gm\n    m = r.exec(item.note)\n    if m?\n      item.note = m[1]\n      item.recommendedBy = m[2]\n    else\n      throw new Error(\"Wrong note format: '#{item.note}'\")\n    item\n\n  _wait_for_list_start: (token, item) ->\n    if token.type == 'list_start' or token.type == 'EOF'\n      if item?\n        @_finalize_item item\n        @items.push item\n      @current_item =\n        address: \"\"\n        note: \"\"\n      return 'addr_idle'\n\n    return @current_state\n\n  _wait_for_addr_start: (token) ->\n    if token.type == 'list_item_start'\n      return 'addr'\n    return @current_state\n\n  _parse_addr: (token, item) ->\n    if token.type == 'text'\n      item.address += token.text\n      return @current_state\n    if token.type == 'list_item_end'\n      return 'note'\n    return @current_state\n\n  _parse_note: (token, item) ->\n    if token.type == 'EOF' or token.type == 'list_start'\n      throw new Error(\"Expect note for place '#{item.address}'\")\n    if token.type == 'code'\n      item.note = token.text\n      return 'idle'\n    return @current_state\n"]}